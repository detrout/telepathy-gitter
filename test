#!/usr/bin/python3
from PyQt5.QtCore import QCoreApplication, QObject, QTimer
import dbus
from dbus.mainloop.pyqt5 import DBusQtMainLoop
import sys
import logging
from pprint import pprint

from glitter.connection_manager import GlitterConnectionManager
import telepathy

logger = logging.getLogger(__name__)

def error(e):
    print('error', e)


class GlitterApp(QObject):
    def __init__(self, args):
        super(GlitterApp, self).__init__()
        self.app = QCoreApplication(args)

        self._loop = DBusQtMainLoop(set_as_default=True)
        self._bus = dbus.SessionBus()
        self._bus_name = None
        self._object_path = None
        self._protocol = None

        self._bus.add_signal_receiver(self.new_connection, "NewConnection")
        self._bus.add_signal_receiver(self.StatusChanged, "StatusChanged")
        self.cm = GlitterConnectionManager()

    def exec_(self):
        self.app.exec_()

    def new_connection(self, bus_name, object_path, protocol):
        if protocol == "gitter":
            logger.info("New connection: %s", bus_name)
            self._bus_name = bus_name
            self._object_path = object_path
            self._protocol = protocol

            #QTimer().singleShot(0, self.test_gitter)
        else:
            logger.debug("Other protocol: %s %s", protocol, bus_name)

    def __getitem__(self, interface):
        if self._bus_name and self._object_path:
            obj = self._bus.get_object(self._bus_name, self._object_path)
            return dbus.Interface(obj, dbus_interface=interface)

    def test_gitter(self):
        logger.info('test')
        self[telepathy.CONNECTION].Connect(
            reply_handler=lambda : None,
            error_handler=error)

    def StatusChanged(self, status, reason):
        logger.info('status changed: %d', status)
        if status == telepathy.CONNECTION_STATUS_CONNECTED:
            self[telepathy.CONNECTION_INTERFACE_CONTACT_LIST].GetContactListAttributes(
                [], False,
                reply_handler=self.receive_contact_list,
                error_handler=error)

    def receive_contact_list(self, contacts):
        logger.info("Got contacts")
        pprint(contacts)

    def quit(self):
        self[telepathy.CONNECTION].Disconnect(
            reply_handler=self.app.quit,
            error_handler=error)

        QTimer().singleShot(2000, self.force_quit)

    def force_quit(self):
        logger.debug("Forcing quit")
        self.app.quit()

def force_connection(app):
    try:
        from secret import *
    except ImportError:
        print("Please create a secret.py with token='gitter token'")

    conn = app.cm.RequestConnection('gitter', {'account': 'detrout0', 'token': token})

def main():
    logging.basicConfig(level=logging.DEBUG)

    app = GlitterApp(sys.argv)
    #QTimer().singleShot(5000, app.quit)
    app.exec_()

if __name__ == "__main__":
    main()
